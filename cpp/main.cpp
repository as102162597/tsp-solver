#include <chrono>
#include <iostream>

#include "tspsolver.hpp"

#define USE_NTH_TEST_DATA 1

using namespace std;


vector<vector<int>> getTestData(const int idx);

int main() {

    tsp tspSolver;

    // parameters for tspSolver
    vector<vector<int>> costs(getTestData(USE_NTH_TEST_DATA));
    vector<int> cycle;
    int cost;

    //_______________________________
    // Faster Algo.

    // start timing
    auto start { chrono::high_resolution_clock::now() };
    cout << "faster algo:" << endl;

    // strat solving the tsp with faster algo.
    if (tspSolver.solve(costs, cycle, cost) < 0) {

        cout << "answer not found" << endl;

    } else {

        // print the path
        cout << cycle[0];
        for (size_t i { 1 }; i != cycle.size(); i += 1)
            cout << "->" << cycle[i];
        cout << endl;

        // print the total cost
        cout << "cost: " << cost << endl;

        // print the elapsed time
        auto end { chrono::high_resolution_clock::now() };
        auto duration { chrono::duration_cast<chrono::milliseconds>(end - start) };
        cout << "took: " << duration.count() << "ms" << endl;

    }

    //_______________________________
    // Brute Force

    cout << "\nbrute froce algo:" << endl;

    // start timing
    auto startBruteForce { chrono::high_resolution_clock::now() };

    // strat solving the tsp with brute force algo.
    if (tspSolver.bruteForceSolve(costs, cycle, cost) < 0) {

        cout << "answer not found" << endl;

    } else {

        // print the path
        cout << cycle[0];
        for (size_t i { 1 }; i != cycle.size(); i += 1)
            cout << "->" << cycle[i];
        cout << endl;

        // print the total cost
        cout << "cost: " << cost << endl;

        // print the elapsed time
        auto end { chrono::high_resolution_clock::now() };
        auto duration { chrono::duration_cast<chrono::milliseconds>(end - startBruteForce) };
        cout << "took: " << duration.count() << "ms" << endl;

    }

    return 0;

}

vector<vector<int>> getTestData(const int idx) {
    const auto nil { tsp::NIL };

    switch (idx) {
        case 0:
            return vector<vector<int>>(
                {   // cities: 7
                    { nil,   3,  93,  13,  33,   9,  57 },
                    {   4, nil,  77,  42,  21,  16,  34 },
                    {  45,  17, nil,  36,  16,  28,  25 },
                    {  39,  90,  80, nil,  56,   7,  91 },
                    {  28,  46,  88,  33, nil,  25,  57 },
                    {   3,  88,  18,  46,  92, nil,   7 },
                    {  44,  26,  33,  27,  84,  39, nil }
                }
            );

        case 1:
            return vector<vector<int>>(
                {   // cities: 15
                    { nil, 107, 241, 190, 124,  80, 316,  76, 152, 157, 283, 133, 113, 297, 228 },
                    { 107, nil, 148, 137,  88, 127, 336, 183, 134,  95, 254, 180, 101, 234, 175 },
                    { 241, 148, nil, 374, 171, 259, 509, 317, 217, 232, 491, 312, 280, 391, 412 },
                    { 190, 137, 374, nil, 202, 234, 222, 192, 248,  42, 117, 287,  79, 107,  38 },
                    { 124,  88, 171, 202, nil,  61, 392, 202,  46, 160, 319, 112, 163, 322, 240 },
                    {  80, 127, 259, 234,  61, nil, 386, 141,  72, 167, 351,  55, 157, 331, 272 },
                    { 316, 336, 509, 222, 392, 386, nil, 233, 438, 254, 202, 439, 235, 254, 210 },
                    {  76, 183, 317, 192, 202, 141, 233, nil, 213, 188, 272, 193, 131, 302, 233 },
                    { 152, 134, 217, 248,  46,  72, 438, 213, nil, 206, 365,  89, 209, 368, 286 },
                    { 157,  95, 232,  42, 160, 167, 254, 188, 206, nil, 159, 220,  57, 149,  80 },
                    { 283, 254, 491, 117, 319, 351, 202, 272, 365, 159, nil, 404, 176, 106,  79 },
                    { 133, 180, 312, 287, 112,  55, 439, 193,  89, 220, 404, nil, 210, 384, 325 },
                    { 113, 101, 280,  79, 163, 157, 235, 131, 209,  57, 176, 210, nil, 186, 117 },
                    { 297, 234, 391, 107, 322, 331, 254, 302, 368, 149, 106, 384, 186, nil,  69 },
                    { 228, 175, 412,  38, 240, 272, 210, 233, 286,  80,  79, 325, 117,  69, nil }
                }
            );

        case 2:
            return vector<vector<int>>(
                {   // cities: 29
                    { nil, 107, 241, 190, 124,  80, 316,  76, 152, 157, 283, 133, 113, 297, 228, 129, 348, 276, 188, 150,  65, 341, 184,  67, 221, 169, 108,  45, 167 },
                    { 107, nil, 148, 137,  88, 127, 336, 183, 134,  95, 254, 180, 101, 234, 175, 176, 265, 199, 182,  67,  42, 278, 271, 146, 251, 105, 191, 139,  79 },
                    { 241, 148, nil, 374, 171, 259, 509, 317, 217, 232, 491, 312, 280, 391, 412, 349, 422, 356, 355, 204, 182, 435, 417, 292, 424, 116, 337, 273,  77 },
                    { 190, 137, 374, nil, 202, 234, 222, 192, 248,  42, 117, 287,  79, 107,  38, 121, 152,  86,  68,  70, 137, 151, 239, 135, 137, 242, 165, 228, 205 },
                    { 124,  88, 171, 202, nil,  61, 392, 202,  46, 160, 319, 112, 163, 322, 240, 232, 314, 287, 238, 155,  65, 366, 300, 175, 307,  57, 220, 121,  97 },
                    {  80, 127, 259, 234,  61, nil, 386, 141,  72, 167, 351,  55, 157, 331, 272, 226, 362, 296, 232, 164,  85, 375, 249, 147, 301, 118, 188,  60, 185 },
                    { 316, 336, 509, 222, 392, 386, nil, 233, 438, 254, 202, 439, 235, 254, 210, 187, 313, 266, 154, 282, 321, 298, 168, 249,  95, 437, 190, 314, 435 },
                    {  76, 183, 317, 192, 202, 141, 233, nil, 213, 188, 272, 193, 131, 302, 233,  98, 344, 289, 177, 216, 141, 346, 108,  57, 190, 245,  43,  81, 243 },
                    { 152, 134, 217, 248,  46,  72, 438, 213, nil, 206, 365,  89, 209, 368, 286, 278, 360, 333, 284, 201, 111, 412, 321, 221, 353,  72, 266, 132, 111 },
                    { 157,  95, 232,  42, 160, 167, 254, 188, 206, nil, 159, 220,  57, 149,  80, 132, 193, 127, 100,  28,  95, 193, 241, 131, 169, 200, 161, 189, 163 },
                    { 283, 254, 491, 117, 319, 351, 202, 272, 365, 159, nil, 404, 176, 106,  79, 161, 165, 141,  95, 187, 254, 103, 279, 215, 117, 359, 216, 308, 322 },
                    { 133, 180, 312, 287, 112,  55, 439, 193,  89, 220, 404, nil, 210, 384, 325, 279, 415, 349, 285, 217, 138, 428, 310, 200, 354, 169, 241, 112, 238 },
                    { 113, 101, 280,  79, 163, 157, 235, 131, 209,  57, 176, 210, nil, 186, 117,  75, 231, 165,  81,  85,  92, 230, 184,  74, 150, 208, 104, 158, 206 },
                    { 297, 234, 391, 107, 322, 331, 254, 302, 368, 149, 106, 384, 186, nil,  69, 191,  59,  35, 125, 167, 255,  44, 309, 245, 169, 327, 246, 335, 288 },
                    { 228, 175, 412,  38, 240, 272, 210, 233, 286,  80,  79, 325, 117,  69, nil, 122, 122,  56,  56, 108, 175, 113, 240, 176, 125, 280, 177, 266, 243 },
                    { 129, 176, 349, 121, 232, 226, 187,  98, 278, 132, 161, 279,  75, 191, 122, nil, 244, 178,  66, 160, 161, 235, 118,  62,  92, 277,  55, 155, 275 },
                    { 348, 265, 422, 152, 314, 362, 313, 344, 360, 193, 165, 415, 231,  59, 122, 244, nil,  66, 178, 198, 286,  77, 362, 287, 228, 358, 299, 380, 319 },
                    { 276, 199, 356,  86, 287, 296, 266, 289, 333, 127, 141, 349, 165,  35,  56, 178,  66, nil, 112, 132, 220,  79, 296, 232, 181, 292, 233, 314, 253 },
                    { 188, 182, 355,  68, 238, 232, 154, 177, 284, 100,  95, 285,  81, 125,  56,  66, 178, 112, nil, 128, 167, 169, 179, 120,  69, 283, 121, 213, 281 },
                    { 150,  67, 204,  70, 155, 164, 282, 216, 201,  28, 187, 217,  85, 167, 108, 160, 198, 132, 128, nil,  88, 211, 269, 159, 197, 172, 189, 182, 135 },
                    {  65,  42, 182, 137,  65,  85, 321, 141, 111,  95, 254, 138,  92, 255, 175, 161, 286, 220, 167,  88, nil, 299, 229, 104, 236, 110, 149,  97, 108 },
                    { 341, 278, 435, 151, 366, 375, 298, 346, 412, 193, 103, 428, 230,  44, 113, 235,  77,  79, 169, 211, 299, nil, 353, 289, 213, 371, 290, 379, 332 },
                    { 184, 271, 417, 239, 300, 249, 168, 108, 321, 241, 279, 310, 184, 309, 240, 118, 362, 296, 179, 269, 229, 353, nil, 121, 162, 345,  80, 189, 342 },
                    {  67, 146, 292, 135, 175, 147, 249,  57, 221, 131, 215, 200,  74, 245, 176,  62, 287, 232, 120, 159, 104, 289, 121, nil, 154, 220,  41,  93, 218 },
                    { 221, 251, 424, 137, 307, 301,  95, 190, 353, 169, 117, 354, 150, 169, 125,  92, 228, 181,  69, 197, 236, 213, 162, 154, nil, 352, 147, 247, 350 },
                    { 169, 105, 116, 242,  57, 118, 437, 245,  72, 200, 359, 169, 208, 327, 280, 277, 358, 292, 283, 172, 110, 371, 345, 220, 352, nil, 265, 178,  39 },
                    { 108, 191, 337, 165, 220, 188, 190,  43, 266, 161, 216, 241, 104, 246, 177,  55, 299, 233, 121, 189, 149, 290,  80,  41, 147, 265, nil, 124, 263 },
                    {  45, 139, 273, 228, 121,  60, 314,  81, 132, 189, 308, 112, 158, 335, 266, 155, 380, 314, 213, 182,  97, 379, 189,  93, 247, 178, 124, nil, 199 },
                    { 167,  79,  77, 205,  97, 185, 435, 243, 111, 163, 322, 238, 206, 288, 243, 275, 319, 253, 281, 135, 108, 332, 342, 218, 350,  39, 263, 199, nil }
                }
            );

        default:
            return vector<vector<int>>(
                {
                    { nil,   3 },
                    {   2, nil },
                }
            );
    };
}
